#!/sw/bin/env ruby
ROOTDIR = File.expand_path(File.dirname(__FILE__))
require 'find'
require 'optparse'

require 'rubygems'
require 'erubis'
require 'activesupport'
require 'action_view'
#require 'ruby-debug'

class SBG
  def initialize
    @templates = "#{ROOTDIR}/templates"
    @htdocs = "#{ROOTDIR}/htdocs"
    @data = "#{ROOTDIR}/data"
    @ppp = 10

    ActionView::Base.process_view_paths(@templates)
  end

  def make_html(template, pagevars, dest)
    view = ActionView::Base.new(@templates, pagevars)
    html = view.render(:file => template)
    open(dest, "wb+") { |f| f << html }
  end

  def paginate(options)
    raise "collection invalid" unless options[:collection]
    collection = options[:collection]
    raise "template invalid" unless options[:template]
    template = options[:template]
    raise "outdir invalid" unless options[:outdir]
    outdir = options[:outdir]
    options[:ppp] ||= 5
    ppp = options[:ppp]
    options[:outname] ||= 'blog'
    outname = options[:outname]
    options[:pagevars] ||= {}
    pagevars = options[:pagevars]

    # Pagination
    pages = collection.length / ppp
    pages += 1 unless collection.length % ppp == 0

    content_keys = collection.keys.sort.reverse

    (1..pages).each { |p|
      puts "    - page #{p} of #{pages}"
      page_content = {}
      if content_keys.length >= ppp
        ppp.times {
          key = content_keys.shift
          page_content[key] = collection[key]
        }
      else
        content_keys.length.times {
          key = content_keys.shift
          page_content[key] = collection[key]
        }
      end

      if p+1 > pages
        next_page = nil
      else
        next_page = p+1
      end

      if p-1 < 1
        prev_page = nil
      else
        prev_page = p-1
      end

      pagevars[:next_page] = next_page
      pagevars[:prev_page] = prev_page
      pagevars[:pages] = pages
      pagevars[:page] = p
      pagevars[:content_info] = page_content

      make_html("#{@templates}/#{template}.erb", pagevars, "#{outdir}/#{outname}-#{p}.html")

    }
    FileUtils.cp("#{outdir}/#{outname}-1.html", "#{outdir}/#{outname}.html")
  end

  def copy_resources
    FileUtils.mkdir_p(@htdocs)
    %w(images javascripts stylesheets resources).each { |sd|
      path = File.join(@htdocs, sd)
      FileUtils.mkdir_p(path)

      src = File.join(@templates, sd)
      FileUtils.cp_r(src, @htdocs, { :remove_destination => true })
    }
  end

  def find_posts
    posts = {}
    Find.find(@data) { |f|
      if File.file?(f) && f =~ /_([\d]{12,12}).txt$/i
        dirdate = $1
        post = {}

        pf = open(f)
        post[:date] = dirdate
        post[:dir] = dirdate
        postdir = File.join(@htdocs, dirdate)
        post[:title] = pf.readline
        post[:body] = pf.read.gsub(/\n\n/, "\n<br><br>\n")

        Dir.mkdir(postdir) unless File.exists?(postdir)
        make_html("#{@templates}/blogpost.erb", {:post => post}, "#{postdir}/index.html")

        posts[dirdate] = post
      end
    }
    posts
  end

  def generate
    pagevars = {}
    copy_resources
    posts = find_posts

    return nil unless posts.length > 0

    paginate(:collection => posts, :template => 'blog', :ppp => 10,
             :outdir => @htdocs, :pagevars => pagevars)

    puts "[*] Generating RSS/Atom"
    pagevars[:content_info] = posts
    make_html("#{@templates}/blog.atom.builder", pagevars, "#{@htdocs}/blog.atom")
    make_html("#{@templates}/blog.rss.builder", pagevars, "#{@htdocs}/blog.rss")
  end
end

if __FILE__ == $0
  puts "[*] Static Blog Generator"
  # Process command line
  opts = OptionParser.new do |opts|
    opts.banner = "Usage: #$0 [options]"
    opts.on('-f', '--force', 'Force regeneration') do
      @force = true
    end
    opts.on('-o', '--outdir |STRING|', 'Directory to output to') do |string|
      @outdir = string
    end
  end
  opts.parse!(ARGV)

  sbg = SBG.new
  sbg.generate
end

